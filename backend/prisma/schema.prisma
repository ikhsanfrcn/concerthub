// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  CUSTOMER
  ORGANIZER
}

model User {
  id               String          @id @default(uuid())
  name             String
  lastName         String?
  email            String          @unique
  zipCode          String?
  state            String?
  city             String?
  street           String?
  houseNumber      String?
  regionNumber     Int?
  phoneNumber      BigInt?
  dob              String?
  password         String
  role             Role            @default(CUSTOMER)
  referralCode     String          @unique
  usedReferralById String?
  referrer         ReferralUsage[] @relation("ReferralsGiven")
  referred         ReferralUsage[] @relation("ReferralsReceived")

  points  Point[]
  tickets Transaction[]
  events  Event[]       @relation("CreatedEvents")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Review    Review[]

  isVerify Boolean   @default(false)
  Voucher  Voucher[]
}

model Point {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Promotion {
  id            String        @id @default(uuid())
  event         Event         @relation(fields: [eventId], references: [id])
  eventId       String
  type          PromotionType
  code          String        @unique
  discountValue Int
  maxUsage      Int?
  usageCount    Int           @default(0)
  expiresAt     DateTime
  createdAt     DateTime      @default(now())
}

enum PromotionType {
  DATE_BASED
}

model Event {
  id          String   @id @default(uuid())
  organizer   User     @relation("CreatedEvents", fields: [organizerId], references: [id])
  organizerId String
  title       String
  description String
  location    String
  date        DateTime
  time        String
  isFree      Boolean  @default(false)
  price       Int      @default(0)
  seats       Int
  category    String

  ticketTypes  TicketType[]
  transactions Transaction[]
  reviews      Review[]
  promotions   Promotion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketType {
  id          String        @id @default(uuid())
  event       Event         @relation(fields: [eventId], references: [id])
  eventId     String
  name        String
  price       Int
  stock       Int
  Transaction Transaction[]
}

model Transaction {
  id           String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  event        Event       @relation(fields: [eventId], references: [id])
  eventId      String
  ticketType   TicketType? @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId String?
  quantity     Int
  totalPrice   Int
  usedPoints   Int         @default(0)
  discount     Int         @default(0)
  createdAt    DateTime    @default(now())
}

model Voucher {
  id              String          @id @default(uuid())
  voucherType     voucherType     @default(REFERRAL)
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  discountPercent Int
  expiresAt       DateTime
  createdAt       DateTime        @default(now())
  ReferralUsage   ReferralUsage[]
}

enum voucherType {
  REFERRAL
}

model ReferralUsage {
  id         String   @id @default(uuid())
  referrer   User     @relation("ReferralsGiven", fields: [referrerId], references: [id])
  referrerId String
  referred   User     @relation("ReferralsReceived", fields: [referredId], references: [id])
  referredId String
  createdAt  DateTime @default(now())
  Voucher    Voucher? @relation(fields: [voucherId], references: [id])
  voucherId  String?
}

model Review {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}
